"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
Unit tests and end-to-end conformance tests."""

import builtins
import cel.expr.checked_pb2
import cel.expr.conformance.env_config_pb2
import cel.expr.eval_pb2
import cel.expr.value_pb2
import collections.abc
import google.protobuf.any_pb2
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import typing

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing.final
class TestSuite(google.protobuf.message.Message):
    """A test suite is a collection of tests designed to evaluate the correctness of
    a CEL policy, a CEL expression or the conformance of a CEL implementation to
    the standard specification.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    NAME_FIELD_NUMBER: builtins.int
    DESCRIPTION_FIELD_NUMBER: builtins.int
    SECTIONS_FIELD_NUMBER: builtins.int
    name: builtins.str
    """The name of the test suite."""
    description: builtins.str
    """Description of the test suite."""
    @property
    def sections(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___TestSection]:
        """Test sections of the test suite.
        Each section represents a behavior to be tested.
        """

    def __init__(
        self,
        *,
        name: builtins.str = ...,
        description: builtins.str = ...,
        sections: collections.abc.Iterable[global___TestSection] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["description", b"description", "name", b"name", "sections", b"sections"]) -> None: ...

global___TestSuite = TestSuite

@typing.final
class TestSection(google.protobuf.message.Message):
    """A collection of related test cases."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    NAME_FIELD_NUMBER: builtins.int
    DESCRIPTION_FIELD_NUMBER: builtins.int
    TESTS_FIELD_NUMBER: builtins.int
    name: builtins.str
    """Name of the test section."""
    description: builtins.str
    """Description of the test section."""
    @property
    def tests(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___TestCase]:
        """Test cases of the test section.
        Each test case represents a test scenario.
        """

    def __init__(
        self,
        *,
        name: builtins.str = ...,
        description: builtins.str = ...,
        tests: collections.abc.Iterable[global___TestCase] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["description", b"description", "name", b"name", "tests", b"tests"]) -> None: ...

global___TestSection = TestSection

@typing.final
class TestCase(google.protobuf.message.Message):
    """A test to validate a CEL policy or expression. The test case encompasses
    evaluation of the compiled expression using the provided input bindings and
    asserting the result against the expected result.
    It can also validate a raw CEL expression string through parse, check and
    eval stages, making use of the augmenting CEL environment if provided.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing.final
    class InputEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.str
        @property
        def value(self) -> global___InputValue: ...
        def __init__(
            self,
            *,
            key: builtins.str = ...,
            value: global___InputValue | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing.Literal["value", b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing.Literal["key", b"key", "value", b"value"]) -> None: ...

    NAME_FIELD_NUMBER: builtins.int
    DESCRIPTION_FIELD_NUMBER: builtins.int
    EXPR_FIELD_NUMBER: builtins.int
    ENV_FIELD_NUMBER: builtins.int
    INPUT_FIELD_NUMBER: builtins.int
    INPUT_CONTEXT_FIELD_NUMBER: builtins.int
    OUTPUT_FIELD_NUMBER: builtins.int
    DEDUCED_TYPE_FIELD_NUMBER: builtins.int
    DISABLE_CHECK_FIELD_NUMBER: builtins.int
    name: builtins.str
    """Name of the test case."""
    description: builtins.str
    """A description of the test."""
    expr: builtins.str
    """The text of the CEL expression."""
    disable_check: builtins.bool
    """Bypass the type-checking and only attempt to evaluate the parsed
    expression.
    """
    @property
    def env(self) -> cel.expr.conformance.env_config_pb2.Environment:
        """Serialized environment to be used for compilation and evaluation of the
        CEL expression for the current test case.
        This option allows validating the same expression against multiple
        environments.
        """

    @property
    def input(self) -> google.protobuf.internal.containers.MessageMap[builtins.str, global___InputValue]:
        """A map representing a variable binding where the key is the name of the
        input variable.
        """

    @property
    def input_context(self) -> global___InputContext:
        """Input in the form of a context proto for the test case.
        Note: Only one of `input_bindings` and `input_context` can be provided. Providing
        both should result in an error.
        """

    @property
    def output(self) -> global___TestOutput:
        """Expected result of the test case."""

    @property
    def deduced_type(self) -> cel.expr.checked_pb2.Type:
        """If specified validates that the deduced type at check time matches
        If the result kind is not set and this field is set, the test is considered
        "check-only".
        """

    def __init__(
        self,
        *,
        name: builtins.str = ...,
        description: builtins.str = ...,
        expr: builtins.str = ...,
        env: cel.expr.conformance.env_config_pb2.Environment | None = ...,
        input: collections.abc.Mapping[builtins.str, global___InputValue] | None = ...,
        input_context: global___InputContext | None = ...,
        output: global___TestOutput | None = ...,
        deduced_type: cel.expr.checked_pb2.Type | None = ...,
        disable_check: builtins.bool = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["deduced_type", b"deduced_type", "env", b"env", "input_context", b"input_context", "output", b"output"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["deduced_type", b"deduced_type", "description", b"description", "disable_check", b"disable_check", "env", b"env", "expr", b"expr", "input", b"input", "input_context", b"input_context", "name", b"name", "output", b"output"]) -> None: ...

global___TestCase = TestCase

@typing.final
class InputContext(google.protobuf.message.Message):
    """Input context proto for the test case"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    CONTEXT_MESSAGE_FIELD_NUMBER: builtins.int
    CONTEXT_EXPR_FIELD_NUMBER: builtins.int
    context_expr: builtins.str
    """A context expression representing a context proto variable. The
    fields of the input proto.Messages are used as top-level variables within
    an Activation. The expression is evaluated using the cel environment
    configured for the test suite.
    """
    @property
    def context_message(self) -> google.protobuf.any_pb2.Any:
        """A context message represents an input kind in the form of a proto
        message whose type is defined at runtime.
        """

    def __init__(
        self,
        *,
        context_message: google.protobuf.any_pb2.Any | None = ...,
        context_expr: builtins.str = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["context_expr", b"context_expr", "context_message", b"context_message", "input_context_kind", b"input_context_kind"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["context_expr", b"context_expr", "context_message", b"context_message", "input_context_kind", b"input_context_kind"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["input_context_kind", b"input_context_kind"]) -> typing.Literal["context_message", "context_expr"] | None: ...

global___InputContext = InputContext

@typing.final
class InputValue(google.protobuf.message.Message):
    """The input value for a variable binding"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    VALUE_FIELD_NUMBER: builtins.int
    EXPR_FIELD_NUMBER: builtins.int
    expr: builtins.str
    """An expression which evaluates to the value of the variable binding.
    The expression is evaluated using the same runtime environment as the
    one used for evaluating the expression under test.
    """
    @property
    def value(self) -> cel.expr.value_pb2.Value:
        """A simple literal value for a variable binding"""

    def __init__(
        self,
        *,
        value: cel.expr.value_pb2.Value | None = ...,
        expr: builtins.str = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["expr", b"expr", "kind", b"kind", "value", b"value"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["expr", b"expr", "kind", b"kind", "value", b"value"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["kind", b"kind"]) -> typing.Literal["value", "expr"] | None: ...

global___InputValue = InputValue

@typing.final
class TestOutput(google.protobuf.message.Message):
    """Expected result of the test case."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    RESULT_VALUE_FIELD_NUMBER: builtins.int
    RESULT_EXPR_FIELD_NUMBER: builtins.int
    EVAL_ERROR_FIELD_NUMBER: builtins.int
    UNKNOWN_FIELD_NUMBER: builtins.int
    result_expr: builtins.str
    """An expression to be evaluated using the cel environment configured for
    the test suite. The result of this expression must match the result of
    the test case.
    """
    @property
    def result_value(self) -> cel.expr.value_pb2.Value:
        """A normal value, which must match the evaluation result exactly via value
        equality semantics. This coincides with proto equality, except for:
        *   maps are order-agnostic
        *   a floating point NaN should match any NaN
        """

    @property
    def eval_error(self) -> cel.expr.eval_pb2.ErrorSet:
        """An error evaluation result set. Success if we match all of the errors in
        the set.
        """

    @property
    def unknown(self) -> cel.expr.eval_pb2.UnknownSet:
        """An unknown evaluation result."""

    def __init__(
        self,
        *,
        result_value: cel.expr.value_pb2.Value | None = ...,
        result_expr: builtins.str = ...,
        eval_error: cel.expr.eval_pb2.ErrorSet | None = ...,
        unknown: cel.expr.eval_pb2.UnknownSet | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["eval_error", b"eval_error", "result_expr", b"result_expr", "result_kind", b"result_kind", "result_value", b"result_value", "unknown", b"unknown"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["eval_error", b"eval_error", "result_expr", b"result_expr", "result_kind", b"result_kind", "result_value", b"result_value", "unknown", b"unknown"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["result_kind", b"result_kind"]) -> typing.Literal["result_value", "result_expr", "eval_error", "unknown"] | None: ...

global___TestOutput = TestOutput
