"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
Copyright 2022 Google LLC

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"""

import builtins
import cel.expr.checked_pb2
import cel.expr.eval_pb2
import cel.expr.syntax_pb2
import collections.abc
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import google.rpc.status_pb2
import sys
import typing

if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing.final
class ParseRequest(google.protobuf.message.Message):
    """Request message for the Parse method."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    CEL_SOURCE_FIELD_NUMBER: builtins.int
    SYNTAX_VERSION_FIELD_NUMBER: builtins.int
    SOURCE_LOCATION_FIELD_NUMBER: builtins.int
    DISABLE_MACROS_FIELD_NUMBER: builtins.int
    cel_source: builtins.str
    """Required. Source text in CEL syntax."""
    syntax_version: builtins.str
    """Tag for version of CEL syntax, for future use."""
    source_location: builtins.str
    """File or resource for source text, used in [SourceInfo][google.api.SourceInfo]."""
    disable_macros: builtins.bool
    """Prevent macro expansion.  See "Macros" in Language Defiinition."""
    def __init__(
        self,
        *,
        cel_source: builtins.str = ...,
        syntax_version: builtins.str = ...,
        source_location: builtins.str = ...,
        disable_macros: builtins.bool = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["cel_source", b"cel_source", "disable_macros", b"disable_macros", "source_location", b"source_location", "syntax_version", b"syntax_version"]) -> None: ...

global___ParseRequest = ParseRequest

@typing.final
class ParseResponse(google.protobuf.message.Message):
    """Response message for the Parse method."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    PARSED_EXPR_FIELD_NUMBER: builtins.int
    ISSUES_FIELD_NUMBER: builtins.int
    @property
    def parsed_expr(self) -> cel.expr.syntax_pb2.ParsedExpr:
        """The parsed representation, or unset if parsing failed."""

    @property
    def issues(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[google.rpc.status_pb2.Status]:
        """Any number of issues with [StatusDetails][] as the details."""

    def __init__(
        self,
        *,
        parsed_expr: cel.expr.syntax_pb2.ParsedExpr | None = ...,
        issues: collections.abc.Iterable[google.rpc.status_pb2.Status] | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["parsed_expr", b"parsed_expr"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["issues", b"issues", "parsed_expr", b"parsed_expr"]) -> None: ...

global___ParseResponse = ParseResponse

@typing.final
class CheckRequest(google.protobuf.message.Message):
    """Request message for the Check method."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    PARSED_EXPR_FIELD_NUMBER: builtins.int
    TYPE_ENV_FIELD_NUMBER: builtins.int
    CONTAINER_FIELD_NUMBER: builtins.int
    NO_STD_ENV_FIELD_NUMBER: builtins.int
    container: builtins.str
    """The protocol buffer context.  See "Name Resolution" in the
    Language Definition.
    """
    no_std_env: builtins.bool
    """If true, use only the declarations in [type_env][google.api.expr.conformance.v1alpha1.CheckRequest.type_env].  If false (default),
    add declarations for the standard definitions to the type environment.  See
    "Standard Definitions" in the Language Definition.
    """
    @property
    def parsed_expr(self) -> cel.expr.syntax_pb2.ParsedExpr:
        """Required. The parsed representation of the CEL program."""

    @property
    def type_env(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[cel.expr.checked_pb2.Decl]:
        """Declarations of types for external variables and functions.
        Required if program uses external variables or functions
        not in the default environment.
        """

    def __init__(
        self,
        *,
        parsed_expr: cel.expr.syntax_pb2.ParsedExpr | None = ...,
        type_env: collections.abc.Iterable[cel.expr.checked_pb2.Decl] | None = ...,
        container: builtins.str = ...,
        no_std_env: builtins.bool = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["parsed_expr", b"parsed_expr"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["container", b"container", "no_std_env", b"no_std_env", "parsed_expr", b"parsed_expr", "type_env", b"type_env"]) -> None: ...

global___CheckRequest = CheckRequest

@typing.final
class CheckResponse(google.protobuf.message.Message):
    """Response message for the Check method."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    CHECKED_EXPR_FIELD_NUMBER: builtins.int
    ISSUES_FIELD_NUMBER: builtins.int
    @property
    def checked_expr(self) -> cel.expr.checked_pb2.CheckedExpr:
        """The annotated representation, or unset if checking failed."""

    @property
    def issues(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[google.rpc.status_pb2.Status]:
        """Any number of issues with [StatusDetails][] as the details."""

    def __init__(
        self,
        *,
        checked_expr: cel.expr.checked_pb2.CheckedExpr | None = ...,
        issues: collections.abc.Iterable[google.rpc.status_pb2.Status] | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["checked_expr", b"checked_expr"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["checked_expr", b"checked_expr", "issues", b"issues"]) -> None: ...

global___CheckResponse = CheckResponse

@typing.final
class EvalRequest(google.protobuf.message.Message):
    """Request message for the Eval method."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing.final
    class BindingsEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.str
        @property
        def value(self) -> cel.expr.eval_pb2.ExprValue: ...
        def __init__(
            self,
            *,
            key: builtins.str = ...,
            value: cel.expr.eval_pb2.ExprValue | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing.Literal["value", b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing.Literal["key", b"key", "value", b"value"]) -> None: ...

    PARSED_EXPR_FIELD_NUMBER: builtins.int
    CHECKED_EXPR_FIELD_NUMBER: builtins.int
    BINDINGS_FIELD_NUMBER: builtins.int
    CONTAINER_FIELD_NUMBER: builtins.int
    container: builtins.str
    """SHOULD be the same container as used in [CheckRequest][google.api.expr.conformance.v1alpha1.CheckRequest], if checked."""
    @property
    def parsed_expr(self) -> cel.expr.syntax_pb2.ParsedExpr:
        """Evaluate based on the parsed representation."""

    @property
    def checked_expr(self) -> cel.expr.checked_pb2.CheckedExpr:
        """Evaluate based on the checked representation."""

    @property
    def bindings(self) -> google.protobuf.internal.containers.MessageMap[builtins.str, cel.expr.eval_pb2.ExprValue]:
        """Bindings for the external variables.  The types SHOULD be compatible
        with the type environment in [CheckRequest][google.api.expr.conformance.v1alpha1.CheckRequest], if checked.
        """

    def __init__(
        self,
        *,
        parsed_expr: cel.expr.syntax_pb2.ParsedExpr | None = ...,
        checked_expr: cel.expr.checked_pb2.CheckedExpr | None = ...,
        bindings: collections.abc.Mapping[builtins.str, cel.expr.eval_pb2.ExprValue] | None = ...,
        container: builtins.str = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["checked_expr", b"checked_expr", "expr_kind", b"expr_kind", "parsed_expr", b"parsed_expr"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["bindings", b"bindings", "checked_expr", b"checked_expr", "container", b"container", "expr_kind", b"expr_kind", "parsed_expr", b"parsed_expr"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["expr_kind", b"expr_kind"]) -> typing.Literal["parsed_expr", "checked_expr"] | None: ...

global___EvalRequest = EvalRequest

@typing.final
class EvalResponse(google.protobuf.message.Message):
    """Response message for the Eval method."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    RESULT_FIELD_NUMBER: builtins.int
    ISSUES_FIELD_NUMBER: builtins.int
    @property
    def result(self) -> cel.expr.eval_pb2.ExprValue:
        """The execution result, or unset if execution couldn't start."""

    @property
    def issues(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[google.rpc.status_pb2.Status]:
        """Any number of issues with [StatusDetails][] as the details.
        Note that CEL execution errors are reified into [ExprValue][].
        Nevertheless, we'll allow out-of-band issues to be raised,
        which also makes the replies more regular.
        """

    def __init__(
        self,
        *,
        result: cel.expr.eval_pb2.ExprValue | None = ...,
        issues: collections.abc.Iterable[google.rpc.status_pb2.Status] | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["result", b"result"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["issues", b"issues", "result", b"result"]) -> None: ...

global___EvalResponse = EvalResponse

@typing.final
class SourcePosition(google.protobuf.message.Message):
    """A specific position in source."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    LOCATION_FIELD_NUMBER: builtins.int
    OFFSET_FIELD_NUMBER: builtins.int
    LINE_FIELD_NUMBER: builtins.int
    COLUMN_FIELD_NUMBER: builtins.int
    location: builtins.str
    """The source location name (e.g. file name)."""
    offset: builtins.int
    """The UTF-8 code unit offset."""
    line: builtins.int
    """The 1-based index of the starting line in the source text
    where the issue occurs, or 0 if unknown.
    """
    column: builtins.int
    """The 0-based index of the starting position within the line of source text
    where the issue occurs.  Only meaningful if line is nonzero.
    """
    def __init__(
        self,
        *,
        location: builtins.str = ...,
        offset: builtins.int = ...,
        line: builtins.int = ...,
        column: builtins.int = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["column", b"column", "line", b"line", "location", b"location", "offset", b"offset"]) -> None: ...

global___SourcePosition = SourcePosition

@typing.final
class IssueDetails(google.protobuf.message.Message):
    """Warnings or errors in service execution are represented by
    [google.rpc.Status][google.rpc.Status] messages, with the following message
    in the details field.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    class _Severity:
        ValueType = typing.NewType("ValueType", builtins.int)
        V: typing_extensions.TypeAlias = ValueType

    class _SeverityEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[IssueDetails._Severity.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
        SEVERITY_UNSPECIFIED: IssueDetails._Severity.ValueType  # 0
        """An unspecified severity."""
        DEPRECATION: IssueDetails._Severity.ValueType  # 1
        """Deprecation issue for statements and method that may no longer be
        supported or maintained.
        """
        WARNING: IssueDetails._Severity.ValueType  # 2
        """Warnings such as: unused variables."""
        ERROR: IssueDetails._Severity.ValueType  # 3
        """Errors such as: unmatched curly braces or variable redefinition."""

    class Severity(_Severity, metaclass=_SeverityEnumTypeWrapper):
        """Severities of issues."""

    SEVERITY_UNSPECIFIED: IssueDetails.Severity.ValueType  # 0
    """An unspecified severity."""
    DEPRECATION: IssueDetails.Severity.ValueType  # 1
    """Deprecation issue for statements and method that may no longer be
    supported or maintained.
    """
    WARNING: IssueDetails.Severity.ValueType  # 2
    """Warnings such as: unused variables."""
    ERROR: IssueDetails.Severity.ValueType  # 3
    """Errors such as: unmatched curly braces or variable redefinition."""

    SEVERITY_FIELD_NUMBER: builtins.int
    POSITION_FIELD_NUMBER: builtins.int
    ID_FIELD_NUMBER: builtins.int
    severity: global___IssueDetails.Severity.ValueType
    """The severity of the issue."""
    id: builtins.int
    """Expression ID from [Expr][], 0 if unknown."""
    @property
    def position(self) -> global___SourcePosition:
        """Position in the source, if known."""

    def __init__(
        self,
        *,
        severity: global___IssueDetails.Severity.ValueType = ...,
        position: global___SourcePosition | None = ...,
        id: builtins.int = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["position", b"position"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["id", b"id", "position", b"position", "severity", b"severity"]) -> None: ...

global___IssueDetails = IssueDetails
