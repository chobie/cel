"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
Copyright 2025 Google LLC

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"""

import builtins
import cel.expr.checked_pb2
import collections.abc
import google.protobuf.descriptor
import google.protobuf.descriptor_pb2
import google.protobuf.internal.containers
import google.protobuf.message
import google.protobuf.struct_pb2
import typing

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing.final
class Environment(google.protobuf.message.Message):
    """Representation of a CEL Environment, defining what features and extensions
    are available for conformance testing.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing.final
    class Import(google.protobuf.message.Message):
        """Import represents a type name that will be abbreviated by its simple name
        making it easier to reference simple type names from packages other than
        the expression container.
        For ex:
          Import{name: 'google.rpc.Status'}
        The above import will ensure that `google.rpc.Status` is available by the
        simple name `Status` within CEL expressions.
        """

        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        NAME_FIELD_NUMBER: builtins.int
        name: builtins.str
        """Qualified type name which will be abbreviated"""
        def __init__(
            self,
            *,
            name: builtins.str = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing.Literal["name", b"name"]) -> None: ...

    @typing.final
    class ContextVariable(google.protobuf.message.Message):
        """ContextVariable represents a message type to be made available as a
        context variable to the CEL environment.
        """

        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        TYPE_NAME_FIELD_NUMBER: builtins.int
        type_name: builtins.str
        """Fully qualified type name of the context proto."""
        def __init__(
            self,
            *,
            type_name: builtins.str = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing.Literal["type_name", b"type_name"]) -> None: ...

    NAME_FIELD_NUMBER: builtins.int
    DESCRIPTION_FIELD_NUMBER: builtins.int
    CONTAINER_FIELD_NUMBER: builtins.int
    IMPORTS_FIELD_NUMBER: builtins.int
    STDLIB_FIELD_NUMBER: builtins.int
    EXTENSIONS_FIELD_NUMBER: builtins.int
    CONTEXT_VARIABLE_FIELD_NUMBER: builtins.int
    DECLARATIONS_FIELD_NUMBER: builtins.int
    VALIDATORS_FIELD_NUMBER: builtins.int
    FEATURES_FIELD_NUMBER: builtins.int
    DISABLE_STANDARD_CEL_DECLARATIONS_FIELD_NUMBER: builtins.int
    MESSAGE_TYPE_EXTENSION_FIELD_NUMBER: builtins.int
    ENABLE_MACRO_CALL_TRACKING_FIELD_NUMBER: builtins.int
    name: builtins.str
    """Name of the environment"""
    description: builtins.str
    """Description for the current environment"""
    container: builtins.str
    """Sets the namespace (container) for the expression.
    This is used to simplify resolution.
    For example with container
      `google.rpc.context`
     an identifier of `google.rpc.context.AttributeContext` could be referred
     to simply as `AttributeContext` in the CEL expression.
    """
    disable_standard_cel_declarations: builtins.bool
    """Disables including the declarations from the standard CEL environment.

    NOTE: Do not disable the standard CEL declarations unless you are aware of
    the implications and have discussed your use case on cel-discuss@
    or with the members of the cel-governance-team@

    Deprecated: Use LibrarySubset to disable standard cel declarations instead:
      stdlib = LibrarySubset{ disable: true }
    """
    enable_macro_call_tracking: builtins.bool
    """When macro call tracking is enabled, the resulting SourceInfo in the
    CheckedExpr will contain a collection of expressions representing the
    function calls which were replaced by macros.

    Deprecated: Use Feature to enable macro call tracking
     Feature{ name: "cel.feature.macro_call_tracking", enabled: true }
    """
    @property
    def imports(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Environment.Import]:
        """List of abbreviations to be added to the CEL environment"""

    @property
    def stdlib(self) -> global___LibrarySubset:
        """Set of options to subset a subsettable library"""

    @property
    def extensions(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Extension]:
        """List of extensions to enable in the CEL environment."""

    @property
    def context_variable(self) -> global___Environment.ContextVariable:
        """If set, adds a context declaration from a proto message.

        Context messages have all of their top-level fields available as variables
        in the type checker.
        """

    @property
    def declarations(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[cel.expr.checked_pb2.Decl]:
        """List of declarations to be configured in the CEL environment.

        Note: The CEL environment can be configured with either the
        context_variable or a set of ident_decls provided as part of declarations.
        Providing both will result in an error.
        """

    @property
    def validators(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Validator]:
        """List of validators for validating the parsed ast."""

    @property
    def features(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Feature]:
        """List of feature flags to be enabled or disabled."""

    @property
    def message_type_extension(self) -> google.protobuf.descriptor_pb2.FileDescriptorSet:
        """If provided, uses the provided FileDescriptorSet to extend types available
        the CEL expression. All "well-known" protobuf messages (google.protobuf.*)
        are known to the CEL compiler, but all others must be provided for type
        checking.
        """

    def __init__(
        self,
        *,
        name: builtins.str = ...,
        description: builtins.str = ...,
        container: builtins.str = ...,
        imports: collections.abc.Iterable[global___Environment.Import] | None = ...,
        stdlib: global___LibrarySubset | None = ...,
        extensions: collections.abc.Iterable[global___Extension] | None = ...,
        context_variable: global___Environment.ContextVariable | None = ...,
        declarations: collections.abc.Iterable[cel.expr.checked_pb2.Decl] | None = ...,
        validators: collections.abc.Iterable[global___Validator] | None = ...,
        features: collections.abc.Iterable[global___Feature] | None = ...,
        disable_standard_cel_declarations: builtins.bool = ...,
        message_type_extension: google.protobuf.descriptor_pb2.FileDescriptorSet | None = ...,
        enable_macro_call_tracking: builtins.bool = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["context_variable", b"context_variable", "message_type_extension", b"message_type_extension", "stdlib", b"stdlib"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["container", b"container", "context_variable", b"context_variable", "declarations", b"declarations", "description", b"description", "disable_standard_cel_declarations", b"disable_standard_cel_declarations", "enable_macro_call_tracking", b"enable_macro_call_tracking", "extensions", b"extensions", "features", b"features", "imports", b"imports", "message_type_extension", b"message_type_extension", "name", b"name", "stdlib", b"stdlib", "validators", b"validators"]) -> None: ...

global___Environment = Environment

@typing.final
class Validator(google.protobuf.message.Message):
    """Represents a named validator with an optional map-based configuration object.
    Naming convention followed by validators:
      <domain>.validator.<validator_name>
    For ex:
      `cel.validator.timestamp`

    Note: the map-keys must directly correspond to the internal representation of
    the original validator, and should only use primitive scalar types as values
    at this time.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing.final
    class ConfigEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.str
        @property
        def value(self) -> google.protobuf.struct_pb2.Value: ...
        def __init__(
            self,
            *,
            key: builtins.str = ...,
            value: google.protobuf.struct_pb2.Value | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing.Literal["value", b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing.Literal["key", b"key", "value", b"value"]) -> None: ...

    NAME_FIELD_NUMBER: builtins.int
    CONFIG_FIELD_NUMBER: builtins.int
    name: builtins.str
    @property
    def config(self) -> google.protobuf.internal.containers.MessageMap[builtins.str, google.protobuf.struct_pb2.Value]:
        """Additional configurations to be included as part of the validation"""

    def __init__(
        self,
        *,
        name: builtins.str = ...,
        config: collections.abc.Mapping[builtins.str, google.protobuf.struct_pb2.Value] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["config", b"config", "name", b"name"]) -> None: ...

global___Validator = Validator

@typing.final
class Feature(google.protobuf.message.Message):
    """Represents a named boolean feature flag supported by CEL.
    Naming convention followed by features:
      <domain>.feature.<feature_name>
    For ex:
      `cel.feature.cross_type_numeric_comparisons`
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    NAME_FIELD_NUMBER: builtins.int
    ENABLED_FIELD_NUMBER: builtins.int
    name: builtins.str
    """Name of the feature flag."""
    enabled: builtins.bool
    """State of the feature flab."""
    def __init__(
        self,
        *,
        name: builtins.str = ...,
        enabled: builtins.bool = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["enabled", b"enabled", "name", b"name"]) -> None: ...

global___Feature = Feature

@typing.final
class Extension(google.protobuf.message.Message):
    """Extension represents a versioned extension library reference to enable in the
    CEL environment.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    NAME_FIELD_NUMBER: builtins.int
    VERSION_FIELD_NUMBER: builtins.int
    name: builtins.str
    """Name of the extension library."""
    version: builtins.str
    """Version of the extension library."""
    def __init__(
        self,
        *,
        name: builtins.str = ...,
        version: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["name", b"name", "version", b"version"]) -> None: ...

global___Extension = Extension

@typing.final
class LibrarySubset(google.protobuf.message.Message):
    """LibrarySubset indicates a subset of the macros and functions supported by a
    subsettable library.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    DISABLED_FIELD_NUMBER: builtins.int
    DISABLE_MACROS_FIELD_NUMBER: builtins.int
    INCLUDE_MACROS_FIELD_NUMBER: builtins.int
    EXCLUDE_MACROS_FIELD_NUMBER: builtins.int
    INCLUDE_FUNCTIONS_FIELD_NUMBER: builtins.int
    EXCLUDE_FUNCTIONS_FIELD_NUMBER: builtins.int
    disabled: builtins.bool
    """Indicates whether the library has been disabled, typically only
    used for default-enabled libraries like stdlib.
    """
    disable_macros: builtins.bool
    """Disables macros for the given library."""
    @property
    def include_macros(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
        """Specifies a set of macro function names to include in the subset."""

    @property
    def exclude_macros(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
        """Specifies a set of macro function names to exclude from the subset.
        Note: if IncludeMacros is non-empty, then ExcludeFunctions is ignored.
        """

    @property
    def include_functions(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[cel.expr.checked_pb2.Decl]:
        """Specifies a set of functions to include in the subset.

        Note: the overloads specified in the subset need only specify their ID.
        Note: if IncludeFunctions is non-empty, then ExcludeFunctions is ignored.
        """

    @property
    def exclude_functions(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[cel.expr.checked_pb2.Decl]:
        """Specifies the set of functions to exclude from the subset.

        Note: the overloads specified in the subset need only specify their ID.
        """

    def __init__(
        self,
        *,
        disabled: builtins.bool = ...,
        disable_macros: builtins.bool = ...,
        include_macros: collections.abc.Iterable[builtins.str] | None = ...,
        exclude_macros: collections.abc.Iterable[builtins.str] | None = ...,
        include_functions: collections.abc.Iterable[cel.expr.checked_pb2.Decl] | None = ...,
        exclude_functions: collections.abc.Iterable[cel.expr.checked_pb2.Decl] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["disable_macros", b"disable_macros", "disabled", b"disabled", "exclude_functions", b"exclude_functions", "exclude_macros", b"exclude_macros", "include_functions", b"include_functions", "include_macros", b"include_macros"]) -> None: ...

global___LibrarySubset = LibrarySubset
